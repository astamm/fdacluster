% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare-caps.R
\name{compare_caps}
\alias{compare_caps}
\title{Generates results of multiple clustering strategies}
\usage{
compare_caps(
  x,
  y,
  n_clusters_max = 5L,
  metric = c("l2", "pearson"),
  clustering_method = c("kmeans", "hclust-complete", "hclust-average", "hclust-single"),
  warping_class = c("affine", "dilation", "none", "shift", "srsf"),
  centroid_type = c("mean", "medoid", "lowess", "poly"),
  cluster_on_phase = FALSE
)
}
\arguments{
\item{x}{A numeric vector of length \eqn{M} or a numeric matrix of shape
\eqn{N \times M} or an object of class \code{\link[funData:funData-class]{funData::funData}}. If a numeric
vector or matrix, it specifies the grid(s) of size \eqn{M} on which each of
the \eqn{N} curves have been observed. If an object of class
\code{\link[funData:funData-class]{funData::funData}}, it contains the whole functional data set and the \code{y}
argument is not used.}

\item{y}{Either a numeric matrix of shape \eqn{N \times M} or a numeric array
of shape \eqn{N \times L \times M} or an object of class \code{\link[fda:fd]{fda::fd}}. If a
numeric matrix or array, it specifies the \eqn{N}-sample of
\eqn{L}-dimensional curves observed on grids of size \eqn{M}. If an object
of class \code{\link[fda:fd]{fda::fd}}, it contains all the necessary information about the
functional data set to be able to evaluate it on user-defined grids.}

\item{n_clusters_max}{An integer value specifying the maximum number of
clusers to use. Defaults to \code{5L}.}

\item{metric}{A string specifying the metric used to compare curves. Choices
are \code{"l2"} or \code{"pearson"}. Defaults to \code{"l2"}. Used only when
\code{warping_class != "srsf"}. For the boundary-preserving warping class, the
L2 distance between the SRSFs of the original curves is used.}

\item{clustering_method}{A character vector specifying one or more clustering
methods to be fit. Choices are \code{"kmeans"}, \code{"hclust-complete"},
\code{"hclust-average"} or \code{"hclust-single"}. Defaults to all of them.}

\item{warping_class}{A character vector specifying one or more classes of
warping functions to use for curve alignment. Choices are \code{"affine"},
\code{"dilation"}, \code{"none"}, \code{"shift"} or \code{"srsf"}. Defaults to all of them.}

\item{centroid_type}{A character vector specifying one or more ways to
compute centroids. Choices are \code{"mean"} or \code{"medoid"}. Defaults to all of
them.}

\item{cluster_on_phase}{A boolean specifying whether clustering should be
based on phase variation or amplitude variation. Defaults to \code{FALSE} which
implies amplitude variation.}
}
\value{
An object of class \code{mcaps} which is a \code{\link[tibble:tibble]{tibble::tibble}} storing the
objects of class \code{\link{caps}} in correspondence of each combination of possible
choices from the input arguments.
}
\description{
This function searches for clusters in the input data set using different
strategies and generates an object of class \code{mcaps} which stores multiple
objects of class \code{\link{caps}}. This is a helper function to facilitate comparison
of clustering methods and choice of an \emph{optimal} one.
}
\examples{
#----------------------------------
# Extracts 15 out of the 30 simulated curves in `simulated30_sub` data set
idx <- c(1:5, 11:15, 21:25)
x <- simulated30_sub$x[idx, ]
y <- simulated30_sub$y[idx, , ]

#----------------------------------
# Runs an HAC with complete linkage with affine alignment, searching for up
# to 2 clusters and using the sample mean as centroid type:
out <- compare_caps(
  x = x,
  y = y,
  n_clusters_max = 1,
  warping_class = "affine",
  clustering_method = "hclust-complete",
  centroid_type = "mean"
)

#----------------------------------
# Then visualize the results
# Either with ggplot2 via ggplot2::autoplot(out)
# or using graphics::plot()
# You can visualize the WSS values:
plot(out, validation_criterion = "wss")
# Or the average silhouette values:
plot(out, validation_criterion = "silhouette")
}
